/* Generated by re2c 3.0 on Mon Feb  6 11:51:12 2023 */
#line 1 "source/front/Lexer.re"
#include <iterator> // std::distance

#include "front/Lexer.h"

namespace pink {
Lexer::Lexer() : location(1, 0, 1, 0) {
  end = cursor = marker = token = buffer.end();
}

Lexer::Lexer(std::string_view text) : location(1, 0, 1, 0), buffer(text) {
  end    = buffer.end();
  cursor = marker = token = buffer.begin();
}

auto Lexer::GetBufferView() const -> const std::string_view { return buffer; }

void Lexer::SetBuffer(std::string_view text) {
  buffer = text;
  end    = buffer.end();
  cursor = marker = token = buffer.begin();
}

void Lexer::AppendToBuffer(std::string_view txt) {
  auto cursor_dist = std::distance(buffer.begin(), cursor);
  auto marker_dist = std::distance(buffer.begin(), marker);
  auto token_dist  = std::distance(buffer.begin(), token);

  buffer += txt;

  end    = buffer.end();
  cursor = buffer.begin() + cursor_dist;
  marker = buffer.begin() + marker_dist;
  token  = buffer.begin() + token_dist;
}

void Lexer::Reset() {
  location = {1, 0, 1, 0};
  buffer.clear();
  end = cursor = marker = token = buffer.end();
}

auto Lexer::EndOfInput() const -> bool { return (end - cursor) == 0; }

void Lexer::UpdateLocation() {
  auto length = cursor - token;

  location.firstLine   = location.lastLine;
  location.firstColumn = location.lastColumn;

  for (long i = 0; i < length; i++) {
    if (token[i] == '\n') {
      location.lastLine   += 1;
      location.lastColumn = location.firstColumn = 0;
    } else {
      location.lastColumn += 1;
    }
  }
}

/*
    token points to the beginning of the
    current token being lexed, and cursor points
    to the current position of the lexer,
    so the last token that was lexed is sitting
    between those two positions.

    Therefore we can use the string constructor
    taking a two iterators to construct the
    string from the characters from between that range.
*/
auto Lexer::yytxt() -> std::string_view { return {token, cursor}; }

auto Lexer::yyloc() -> Location { return location; }

/*
    These are the definitions of the parsing
    primitives that re2c uses, such that we
    can interoperate between c++ and re2c

    #TODO: i think this regex will allow for identifiers
            like: this-is-an-ident, follow-with-hyphen
            but parse identifierss like:
                    -unop-application-of-an-identifier,
                    binop-application-of-an-identifier- more-text

    hyphen-id = id ('-' id)+;

    #TODO and this regex will allow us to lex
    fully qualified identifiers when we want to
    add namespaces to the language.

    full-id = id ("::" id)+;
*/
#line 112 "source/front/Lexer.re"


// NOLINTBEGIN(cppcoreguidelines-avoid-goto)
// #REASON: re2c uses gotos to implement the lexer and as all of the
// gotos are from generated code we are trusting re2c to
// use gotos in a safe and sane way here.
auto Lexer::yylex() -> Token {
  while (true) {
    token = cursor;

    
#line 109 "source/front/Lexer.cpp"
{
	char yych;
	yych = *cursor;
	switch (yych) {
		case '\t':
		case '\n':
		case ' ': goto yy2;
		case '!':
		case '$':
		case '%':
		case '&':
		case '*':
		case '+':
		case '-':
		case '/':
		case '<':
		case '>':
		case '@':
		case '^':
		case '|':
		case '~': goto yy4;
		case '(': goto yy6;
		case ')': goto yy7;
		case ',': goto yy8;
		case '.': goto yy9;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy10;
		case ':': goto yy12;
		case ';': goto yy14;
		case '=': goto yy15;
		case 'A':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'O':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'g':
		case 'h':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 'u':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		case 'B': goto yy20;
		case 'I': goto yy21;
		case 'N': goto yy22;
		case 'P': goto yy23;
		case '[': goto yy24;
		case ']': goto yy25;
		case 'd': goto yy26;
		case 'e': goto yy27;
		case 'f': goto yy28;
		case 'i': goto yy29;
		case 'n': goto yy30;
		case 't': goto yy31;
		case 'v': goto yy32;
		case 'w': goto yy33;
		case '{': goto yy34;
		case '}': goto yy35;
		default:
			if (end <= cursor) goto yy95;
			goto yy1;
	}
yy1:
	++cursor;
#line 157 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Error; }
#line 213 "source/front/Lexer.cpp"
yy2:
	yych = *++cursor;
	switch (yych) {
		case '\t':
		case '\n':
		case ' ': goto yy2;
		default: goto yy3;
	}
yy3:
#line 156 "source/front/Lexer.re"
	{ UpdateLocation(); continue; }
#line 225 "source/front/Lexer.cpp"
yy4:
	yych = *++cursor;
	switch (yych) {
		case '!':
		case '$':
		case '%':
		case '&':
		case '*':
		case '+':
		case '-':
		case '/':
		case '<':
		case '=':
		case '>':
		case '@':
		case '^':
		case '|':
		case '~': goto yy4;
		default: goto yy5;
	}
yy5:
#line 153 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Op; }
#line 249 "source/front/Lexer.cpp"
yy6:
	++cursor;
#line 145 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::LParen; }
#line 254 "source/front/Lexer.cpp"
yy7:
	++cursor;
#line 146 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::RParen; }
#line 259 "source/front/Lexer.cpp"
yy8:
	++cursor;
#line 140 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Comma; }
#line 264 "source/front/Lexer.cpp"
yy9:
	++cursor;
#line 139 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Dot; }
#line 269 "source/front/Lexer.cpp"
yy10:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy10;
		default: goto yy11;
	}
yy11:
#line 154 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Integer; }
#line 288 "source/front/Lexer.cpp"
yy12:
	yych = *++cursor;
	switch (yych) {
		case '=': goto yy36;
		default: goto yy13;
	}
yy13:
#line 142 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Colon; }
#line 298 "source/front/Lexer.cpp"
yy14:
	++cursor;
#line 141 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Semicolon;}
#line 303 "source/front/Lexer.cpp"
yy15:
	yych = *++cursor;
	switch (yych) {
		case '!':
		case '$':
		case '%':
		case '&':
		case '*':
		case '+':
		case '-':
		case '/':
		case '<':
		case '=':
		case '>':
		case '@':
		case '^':
		case '|':
		case '~': goto yy4;
		default: goto yy16;
	}
yy16:
#line 143 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Equals; }
#line 327 "source/front/Lexer.cpp"
yy17:
	yych = *++cursor;
yy18:
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy19;
	}
yy19:
#line 152 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Id; }
#line 400 "source/front/Lexer.cpp"
yy20:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'o': goto yy37;
		default: goto yy18;
	}
yy21:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'n': goto yy38;
		default: goto yy18;
	}
yy22:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'i': goto yy39;
		default: goto yy18;
	}
yy23:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'o': goto yy40;
		default: goto yy18;
	}
yy24:
	++cursor;
#line 149 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::LBracket; }
#line 433 "source/front/Lexer.cpp"
yy25:
	++cursor;
#line 150 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::RBracket; }
#line 438 "source/front/Lexer.cpp"
yy26:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'o': goto yy41;
		default: goto yy18;
	}
yy27:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'l': goto yy43;
		default: goto yy18;
	}
yy28:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'a': goto yy44;
		case 'n': goto yy45;
		default: goto yy18;
	}
yy29:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'f': goto yy47;
		default: goto yy18;
	}
yy30:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'i': goto yy49;
		default: goto yy18;
	}
yy31:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'h': goto yy50;
		case 'r': goto yy51;
		default: goto yy18;
	}
yy32:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'a': goto yy52;
		default: goto yy18;
	}
yy33:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'h': goto yy53;
		default: goto yy18;
	}
yy34:
	++cursor;
#line 147 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::LBrace; }
#line 501 "source/front/Lexer.cpp"
yy35:
	++cursor;
#line 148 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::RBrace; }
#line 506 "source/front/Lexer.cpp"
yy36:
	++cursor;
#line 144 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::ColonEq; }
#line 511 "source/front/Lexer.cpp"
yy37:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'o': goto yy54;
		default: goto yy18;
	}
yy38:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 't': goto yy55;
		default: goto yy18;
	}
yy39:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'l': goto yy56;
		default: goto yy18;
	}
yy40:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'i': goto yy58;
		default: goto yy18;
	}
yy41:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy42;
	}
yy42:
#line 137 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Do; }
#line 611 "source/front/Lexer.cpp"
yy43:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 's': goto yy59;
		default: goto yy18;
	}
yy44:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'l': goto yy60;
		default: goto yy18;
	}
yy45:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy46;
	}
yy46:
#line 131 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Fn; }
#line 697 "source/front/Lexer.cpp"
yy47:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy48;
	}
yy48:
#line 133 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::If; }
#line 769 "source/front/Lexer.cpp"
yy49:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'l': goto yy61;
		default: goto yy18;
	}
yy50:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'e': goto yy63;
		default: goto yy18;
	}
yy51:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'u': goto yy64;
		default: goto yy18;
	}
yy52:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'r': goto yy65;
		default: goto yy18;
	}
yy53:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'i': goto yy67;
		default: goto yy18;
	}
yy54:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'l': goto yy68;
		default: goto yy18;
	}
yy55:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'e': goto yy69;
		default: goto yy18;
	}
yy56:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy57;
	}
yy57:
#line 124 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::NilType; }
#line 890 "source/front/Lexer.cpp"
yy58:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'n': goto yy70;
		default: goto yy18;
	}
yy59:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'e': goto yy71;
		default: goto yy18;
	}
yy60:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 's': goto yy73;
		default: goto yy18;
	}
yy61:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy62;
	}
yy62:
#line 123 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Nil; }
#line 983 "source/front/Lexer.cpp"
yy63:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'n': goto yy74;
		default: goto yy18;
	}
yy64:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'e': goto yy76;
		default: goto yy18;
	}
yy65:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy66;
	}
yy66:
#line 132 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Var; }
#line 1069 "source/front/Lexer.cpp"
yy67:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'l': goto yy78;
		default: goto yy18;
	}
yy68:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'e': goto yy79;
		default: goto yy18;
	}
yy69:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'g': goto yy80;
		default: goto yy18;
	}
yy70:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 't': goto yy81;
		default: goto yy18;
	}
yy71:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy72;
	}
yy72:
#line 135 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Else; }
#line 1169 "source/front/Lexer.cpp"
yy73:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'e': goto yy82;
		default: goto yy18;
	}
yy74:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy75;
	}
yy75:
#line 134 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Then; }
#line 1248 "source/front/Lexer.cpp"
yy76:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy77;
	}
yy77:
#line 126 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::True; }
#line 1320 "source/front/Lexer.cpp"
yy78:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'e': goto yy84;
		default: goto yy18;
	}
yy79:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'a': goto yy86;
		default: goto yy18;
	}
yy80:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'e': goto yy87;
		default: goto yy18;
	}
yy81:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'e': goto yy88;
		default: goto yy18;
	}
yy82:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy83;
	}
yy83:
#line 127 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::False; }
#line 1420 "source/front/Lexer.cpp"
yy84:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy85;
	}
yy85:
#line 136 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::While; }
#line 1492 "source/front/Lexer.cpp"
yy86:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'n': goto yy89;
		default: goto yy18;
	}
yy87:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'r': goto yy91;
		default: goto yy18;
	}
yy88:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'r': goto yy93;
		default: goto yy18;
	}
yy89:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy90;
	}
yy90:
#line 128 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::BooleanType; }
#line 1585 "source/front/Lexer.cpp"
yy91:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy92;
	}
yy92:
#line 125 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::IntegerType; }
#line 1657 "source/front/Lexer.cpp"
yy93:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy94;
	}
yy94:
#line 129 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Pointer; }
#line 1729 "source/front/Lexer.cpp"
yy95:
#line 158 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::End; }
#line 1733 "source/front/Lexer.cpp"
}
#line 159 "source/front/Lexer.re"

  }
}
// NOLINTEND(cppcoreguidelines-avoid-goto)
} // namespace pink
