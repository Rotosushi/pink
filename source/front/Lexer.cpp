/* Generated by re2c 3.0 on Fri Feb  3 11:40:32 2023 */
#line 1 "source/front/Lexer.re"
#include <iterator> // std::distance

#include "front/Lexer.h"

namespace pink {
Lexer::Lexer() : loc(1, 0, 1, 0) {
  end = cursor = marker = token = buffer.end();
}

Lexer::Lexer(std::string &buf) : loc(1, 0, 1, 0), buffer(buf) {
  end = buffer.end();
  cursor = marker = token = buffer.begin();
}

auto Lexer::GetBuf() const -> const std::string & { return buffer; }

void Lexer::SetBuf(std::string &buf) {
  buffer = buf;
  end = buffer.end();
  cursor = marker = token = buffer.begin();
}

void Lexer::AppendBuf(const char *txt) {
  auto cursor_dist = std::distance(buffer.begin(), cursor);
  auto marker_dist = std::distance(buffer.begin(), marker);
  auto token_dist = std::distance(buffer.begin(), token);

  buffer += txt;

  end = buffer.end();
  cursor = buffer.begin() + cursor_dist;
  marker = buffer.begin() + marker_dist;
  token = buffer.begin() + token_dist;
}

void Lexer::AppendBuf(std::string &buf) { AppendBuf(buf.c_str()); }

void Lexer::Getline(std::istream &input) {
  auto cursor_distance = std::distance(buffer.begin(), cursor);
  auto marker_distance = std::distance(buffer.begin(), marker);
  auto token_distance = std::distance(buffer.begin(), token);

  char character = '\0';

  do {
    character = static_cast<char>(input.get());

    if (input.eof()) {
      break;
    }

    buffer += character;
  } while (character != '\n');

  end = buffer.end();
  cursor = buffer.begin() + cursor_distance;
  marker = buffer.begin() + marker_distance;
  token = buffer.begin() + token_distance;
}

void Lexer::Reset() {
  loc = {1, 0, 1, 0};
  buffer.clear();
  end = cursor = marker = token = buffer.end();
}

auto Lexer::EndOfInput() const -> bool { return (end - cursor) == 0; }

void Lexer::UpdateLoc() {
  auto length = cursor - token;

  loc.firstLine = loc.lastLine;
  loc.firstColumn = loc.lastColumn;

  for (long i = 0; i < length; i++) {
    if (token[i] == '\n') {
      loc.lastLine += 1;
      loc.lastColumn = loc.firstColumn = 0;
    } else {
      loc.lastColumn += 1;
    }
  }
}

/*
    token points to the beginning of the
    current token being lexed, and cursor points
    to the current position of the lexer,
    so the last token that was lexed is sitting
    between those two positions.

    Therefore we can use the string constructor
    taking a two iterators to construct the
    string from the characters from between that range.
*/
auto Lexer::yytxt() -> std::string { return {token, cursor}; }

auto Lexer::yyloc() -> Location { return loc; }

/*
    These are the definitions of the parsing
    primitives that re2c uses, such that we
    can interoperate between c++ and re2c

    #TODO: i think this regex will allow for identifiers
            like: this-is-an-ident, follow-with-hyphen
            but parse identifierss like:
                    -unop-application-of-an-identifier,
                    binop-application-of-an-identifier- more-text

    hyphen-id = id ('-' id)+;

    #TODO and this regex will allow us to lex
    fully qualified identifiers when we want to
    add namespaces to the language.

    full-id = id ("::" id)+;
*/
#line 137 "source/front/Lexer.re"


// NOLINTBEGIN(cppcoreguidelines-avoid-goto)
// #REASON: re2c uses gotos to implement the lexer and as all of the
// gotos are from generated code we are trusting re2c to
// use gotos in a safe and sane way here.
auto Lexer::yylex() -> Token {
  while (true) {
    token = cursor;

    
#line 134 "source/front/Lexer.cpp"
{
	char yych;
	yych = *cursor;
	switch (yych) {
		case '\t':
		case '\n':
		case ' ': goto yy2;
		case '!':
		case '$':
		case '%':
		case '&':
		case '*':
		case '+':
		case '-':
		case '/':
		case '<':
		case '>':
		case '@':
		case '^':
		case '|':
		case '~': goto yy4;
		case '(': goto yy6;
		case ')': goto yy7;
		case ',': goto yy8;
		case '.': goto yy9;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy10;
		case ':': goto yy12;
		case ';': goto yy14;
		case '=': goto yy15;
		case 'A':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'O':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'g':
		case 'h':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 'u':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		case 'B': goto yy20;
		case 'I': goto yy21;
		case 'N': goto yy22;
		case 'P': goto yy23;
		case '[': goto yy24;
		case ']': goto yy25;
		case 'd': goto yy26;
		case 'e': goto yy27;
		case 'f': goto yy28;
		case 'i': goto yy29;
		case 'n': goto yy30;
		case 't': goto yy31;
		case 'v': goto yy32;
		case 'w': goto yy33;
		case '{': goto yy34;
		case '}': goto yy35;
		default:
			if (end <= cursor) goto yy91;
			goto yy1;
	}
yy1:
	++cursor;
#line 182 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::Error; }
#line 238 "source/front/Lexer.cpp"
yy2:
	yych = *++cursor;
	switch (yych) {
		case '\t':
		case '\n':
		case ' ': goto yy2;
		default: goto yy3;
	}
yy3:
#line 181 "source/front/Lexer.re"
	{ UpdateLoc(); continue; }
#line 250 "source/front/Lexer.cpp"
yy4:
	yych = *++cursor;
	switch (yych) {
		case '!':
		case '$':
		case '%':
		case '&':
		case '*':
		case '+':
		case '-':
		case '/':
		case '<':
		case '=':
		case '>':
		case '@':
		case '^':
		case '|':
		case '~': goto yy4;
		default: goto yy5;
	}
yy5:
#line 178 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::Op; }
#line 274 "source/front/Lexer.cpp"
yy6:
	++cursor;
#line 170 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::LParen; }
#line 279 "source/front/Lexer.cpp"
yy7:
	++cursor;
#line 171 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::RParen; }
#line 284 "source/front/Lexer.cpp"
yy8:
	++cursor;
#line 165 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::Comma; }
#line 289 "source/front/Lexer.cpp"
yy9:
	++cursor;
#line 164 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::Dot; }
#line 294 "source/front/Lexer.cpp"
yy10:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy10;
		default: goto yy11;
	}
yy11:
#line 179 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::Integer; }
#line 313 "source/front/Lexer.cpp"
yy12:
	yych = *++cursor;
	switch (yych) {
		case '=': goto yy36;
		default: goto yy13;
	}
yy13:
#line 167 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::Colon; }
#line 323 "source/front/Lexer.cpp"
yy14:
	++cursor;
#line 166 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::Semicolon;}
#line 328 "source/front/Lexer.cpp"
yy15:
	yych = *++cursor;
	switch (yych) {
		case '!':
		case '$':
		case '%':
		case '&':
		case '*':
		case '+':
		case '-':
		case '/':
		case '<':
		case '=':
		case '>':
		case '@':
		case '^':
		case '|':
		case '~': goto yy4;
		default: goto yy16;
	}
yy16:
#line 168 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::Equals; }
#line 352 "source/front/Lexer.cpp"
yy17:
	yych = *++cursor;
yy18:
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy19;
	}
yy19:
#line 177 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::Id; }
#line 425 "source/front/Lexer.cpp"
yy20:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'o': goto yy37;
		default: goto yy18;
	}
yy21:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'n': goto yy38;
		default: goto yy18;
	}
yy22:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'i': goto yy39;
		default: goto yy18;
	}
yy23:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 't': goto yy40;
		default: goto yy18;
	}
yy24:
	++cursor;
#line 174 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::LBracket; }
#line 458 "source/front/Lexer.cpp"
yy25:
	++cursor;
#line 175 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::RBracket; }
#line 463 "source/front/Lexer.cpp"
yy26:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'o': goto yy41;
		default: goto yy18;
	}
yy27:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'l': goto yy43;
		default: goto yy18;
	}
yy28:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'a': goto yy44;
		case 'n': goto yy45;
		default: goto yy18;
	}
yy29:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'f': goto yy47;
		default: goto yy18;
	}
yy30:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'i': goto yy49;
		default: goto yy18;
	}
yy31:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'h': goto yy50;
		case 'r': goto yy51;
		default: goto yy18;
	}
yy32:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'a': goto yy52;
		default: goto yy18;
	}
yy33:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'h': goto yy53;
		default: goto yy18;
	}
yy34:
	++cursor;
#line 172 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::LBrace; }
#line 526 "source/front/Lexer.cpp"
yy35:
	++cursor;
#line 173 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::RBrace; }
#line 531 "source/front/Lexer.cpp"
yy36:
	++cursor;
#line 169 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::ColonEq; }
#line 536 "source/front/Lexer.cpp"
yy37:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'o': goto yy54;
		default: goto yy18;
	}
yy38:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 't': goto yy55;
		default: goto yy18;
	}
yy39:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'l': goto yy56;
		default: goto yy18;
	}
yy40:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'r': goto yy58;
		default: goto yy18;
	}
yy41:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy42;
	}
yy42:
#line 162 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::Do; }
#line 636 "source/front/Lexer.cpp"
yy43:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 's': goto yy60;
		default: goto yy18;
	}
yy44:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'l': goto yy61;
		default: goto yy18;
	}
yy45:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy46;
	}
yy46:
#line 156 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::Fn; }
#line 722 "source/front/Lexer.cpp"
yy47:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy48;
	}
yy48:
#line 158 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::If; }
#line 794 "source/front/Lexer.cpp"
yy49:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'l': goto yy62;
		default: goto yy18;
	}
yy50:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'e': goto yy64;
		default: goto yy18;
	}
yy51:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'u': goto yy65;
		default: goto yy18;
	}
yy52:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'r': goto yy66;
		default: goto yy18;
	}
yy53:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'i': goto yy68;
		default: goto yy18;
	}
yy54:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'l': goto yy69;
		default: goto yy18;
	}
yy55:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'e': goto yy70;
		default: goto yy18;
	}
yy56:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy57;
	}
yy57:
#line 149 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::NilType; }
#line 915 "source/front/Lexer.cpp"
yy58:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy59;
	}
yy59:
#line 154 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::Ptr; }
#line 987 "source/front/Lexer.cpp"
yy60:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'e': goto yy71;
		default: goto yy18;
	}
yy61:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 's': goto yy73;
		default: goto yy18;
	}
yy62:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy63;
	}
yy63:
#line 148 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::Nil; }
#line 1073 "source/front/Lexer.cpp"
yy64:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'n': goto yy74;
		default: goto yy18;
	}
yy65:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'e': goto yy76;
		default: goto yy18;
	}
yy66:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy67;
	}
yy67:
#line 157 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::Var; }
#line 1159 "source/front/Lexer.cpp"
yy68:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'l': goto yy78;
		default: goto yy18;
	}
yy69:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'e': goto yy79;
		default: goto yy18;
	}
yy70:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'g': goto yy80;
		default: goto yy18;
	}
yy71:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy72;
	}
yy72:
#line 160 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::Else; }
#line 1252 "source/front/Lexer.cpp"
yy73:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'e': goto yy81;
		default: goto yy18;
	}
yy74:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy75;
	}
yy75:
#line 159 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::Then; }
#line 1331 "source/front/Lexer.cpp"
yy76:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy77;
	}
yy77:
#line 151 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::True; }
#line 1403 "source/front/Lexer.cpp"
yy78:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'e': goto yy83;
		default: goto yy18;
	}
yy79:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'a': goto yy85;
		default: goto yy18;
	}
yy80:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'e': goto yy86;
		default: goto yy18;
	}
yy81:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy82;
	}
yy82:
#line 152 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::False; }
#line 1496 "source/front/Lexer.cpp"
yy83:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy84;
	}
yy84:
#line 161 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::While; }
#line 1568 "source/front/Lexer.cpp"
yy85:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'n': goto yy87;
		default: goto yy18;
	}
yy86:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy19;
		case 'r': goto yy89;
		default: goto yy18;
	}
yy87:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy88;
	}
yy88:
#line 153 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::BooleanType; }
#line 1654 "source/front/Lexer.cpp"
yy89:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy17;
		default: goto yy90;
	}
yy90:
#line 150 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::IntegerType; }
#line 1726 "source/front/Lexer.cpp"
yy91:
#line 183 "source/front/Lexer.re"
	{ UpdateLoc(); return Token::End; }
#line 1730 "source/front/Lexer.cpp"
}
#line 184 "source/front/Lexer.re"

  }
}
// NOLINTEND(cppcoreguidelines-avoid-goto)
} // namespace pink
