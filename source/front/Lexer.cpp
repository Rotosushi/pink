/* Generated by re2c 3.0 on Sat Apr 15 13:56:54 2023 */
#line 1 "source/front/Lexer.re"
// Copyright (C) 2023 cadence
//
// This file is part of pink.
//
// pink is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// pink is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with pink.  If not, see <http://www.gnu.org/licenses/>.

#include <iterator> // std::distance

#include "front/Lexer.h"

namespace pink {
Lexer::Lexer()
    : location(1, 0, 1, 0) {
  end = cursor = marker = token = buffer.end();
}

Lexer::Lexer(std::string_view text)
    : location(1, 0, 1, 0),
      buffer(text) {
  end    = buffer.end();
  cursor = marker = token = buffer.begin();
}

void Lexer::SetBuffer(std::string_view text) {
  buffer = text;
  end    = buffer.end();
  cursor = marker = token = buffer.begin();
}

void Lexer::AppendToBuffer(std::string_view txt) {
  auto cursor_dist = std::distance(buffer.begin(), cursor);
  auto marker_dist = std::distance(buffer.begin(), marker);
  auto token_dist  = std::distance(buffer.begin(), token);

  buffer.append(txt);

  end    = buffer.end();
  cursor = buffer.begin() + cursor_dist;
  marker = buffer.begin() + marker_dist;
  token  = buffer.begin() + token_dist;
}

void Lexer::Reset() {
  location = {1, 0, 1, 0};
  buffer.clear();
  end = cursor = marker = token = buffer.end();
}

auto Lexer::EndOfInput() const -> bool { return (end - cursor) == 0; }

void Lexer::UpdateLocation() {
  auto length = cursor - token;

  location.firstLine   = location.lastLine;
  location.firstColumn = location.lastColumn;

  for (long i = 0; i < length; i++) {
    if (token[i] == '\n') {
      location.lastLine   += 1;
      location.lastColumn = location.firstColumn = 0;
    } else {
      location.lastColumn += 1;
    }
  }
}

/*
    token points to the beginning of the
    current token being lexed, and cursor points
    to the current position of the lexer,
    so the last token that was lexed is sitting
    between those two positions.

    Therefore we can use the string constructor
    taking a two iterators to construct the
    string from the characters from between that range.
*/
auto Lexer::txt() -> std::string_view { return {token, cursor}; }

auto Lexer::loc() -> Location { return location; }

/*
    These are the definitions of the parsing
    primitives that re2c uses, such that we
    can interoperate between c++ and re2c

    #TODO: i think this regex will allow for identifiers
            like: this-is-an-ident, follow-with-hyphen
            but parse identifierss like:
                    -unop-application-of-an-identifier,
                    binop-application-of-an-identifier- more-text

    hyphen-id = id ('-' id)+;

    #TODO and this regex will allow us to lex
    fully qualified identifiers when we want to
    add namespaces to the language.

    full-id = id ("::" id)+;
*/
#line 129 "source/front/Lexer.re"


// NOLINTBEGIN(cppcoreguidelines-avoid-goto)
// #REASON: re2c uses gotos to implement the lexer and as all of the
// gotos are from generated code we are trusting re2c to
// use gotos in a safe and sane way here.
auto Lexer::lex() -> Token {
  while (true) {
    token = cursor;

    
#line 127 "source/front/Lexer.cpp"
{
	char yych;
	yych = *cursor;
	switch (yych) {
		case '\t':
		case '\n':
		case ' ': goto yy2;
		case '!': goto yy4;
		case '%': goto yy6;
		case '&': goto yy7;
		case '(': goto yy8;
		case ')': goto yy9;
		case '*': goto yy10;
		case '+': goto yy11;
		case ',': goto yy12;
		case '-': goto yy13;
		case '.': goto yy15;
		case '/': goto yy16;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy17;
		case ':': goto yy19;
		case ';': goto yy21;
		case '<': goto yy22;
		case '=': goto yy24;
		case '>': goto yy26;
		case 'A':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'g':
		case 'h':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 'u':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		case 'B': goto yy31;
		case 'I': goto yy32;
		case 'N': goto yy33;
		case '[': goto yy34;
		case ']': goto yy35;
		case 'd': goto yy36;
		case 'e': goto yy37;
		case 'f': goto yy38;
		case 'i': goto yy39;
		case 'n': goto yy40;
		case 't': goto yy41;
		case 'v': goto yy42;
		case 'w': goto yy43;
		case '{': goto yy44;
		case '|': goto yy45;
		case '}': goto yy46;
		default:
			if (end <= cursor) goto yy104;
			goto yy1;
	}
yy1:
	++cursor;
#line 188 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Error; }
#line 227 "source/front/Lexer.cpp"
yy2:
	yych = *++cursor;
	switch (yych) {
		case '\t':
		case '\n':
		case ' ': goto yy2;
		default: goto yy3;
	}
yy3:
#line 187 "source/front/Lexer.re"
	{ UpdateLocation(); continue; }
#line 239 "source/front/Lexer.cpp"
yy4:
	yych = *++cursor;
	switch (yych) {
		case '=': goto yy47;
		default: goto yy5;
	}
yy5:
#line 162 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Not; }
#line 249 "source/front/Lexer.cpp"
yy6:
	++cursor;
#line 159 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Modulo; }
#line 254 "source/front/Lexer.cpp"
yy7:
	++cursor;
#line 160 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::And; }
#line 259 "source/front/Lexer.cpp"
yy8:
	++cursor;
#line 176 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::LParen; }
#line 264 "source/front/Lexer.cpp"
yy9:
	++cursor;
#line 177 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::RParen; }
#line 269 "source/front/Lexer.cpp"
yy10:
	++cursor;
#line 157 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Star; }
#line 274 "source/front/Lexer.cpp"
yy11:
	++cursor;
#line 155 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Add; }
#line 279 "source/front/Lexer.cpp"
yy12:
	++cursor;
#line 171 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Comma; }
#line 284 "source/front/Lexer.cpp"
yy13:
	yych = *++cursor;
	switch (yych) {
		case '>': goto yy48;
		default: goto yy14;
	}
yy14:
#line 156 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Sub; }
#line 294 "source/front/Lexer.cpp"
yy15:
	++cursor;
#line 170 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Dot; }
#line 299 "source/front/Lexer.cpp"
yy16:
	++cursor;
#line 158 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Divide; }
#line 304 "source/front/Lexer.cpp"
yy17:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy17;
		default: goto yy18;
	}
yy18:
#line 185 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Integer; }
#line 323 "source/front/Lexer.cpp"
yy19:
	yych = *++cursor;
	switch (yych) {
		case '=': goto yy49;
		default: goto yy20;
	}
yy20:
#line 173 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Colon; }
#line 333 "source/front/Lexer.cpp"
yy21:
	++cursor;
#line 172 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Semicolon;}
#line 338 "source/front/Lexer.cpp"
yy22:
	yych = *++cursor;
	switch (yych) {
		case '=': goto yy50;
		default: goto yy23;
	}
yy23:
#line 165 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::LessThan; }
#line 348 "source/front/Lexer.cpp"
yy24:
	yych = *++cursor;
	switch (yych) {
		case '=': goto yy51;
		default: goto yy25;
	}
yy25:
#line 174 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Assign; }
#line 358 "source/front/Lexer.cpp"
yy26:
	yych = *++cursor;
	switch (yych) {
		case '=': goto yy52;
		default: goto yy27;
	}
yy27:
#line 167 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::GreaterThan; }
#line 368 "source/front/Lexer.cpp"
yy28:
	yych = *++cursor;
yy29:
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy30;
	}
yy30:
#line 184 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Id; }
#line 441 "source/front/Lexer.cpp"
yy31:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'o': goto yy53;
		default: goto yy29;
	}
yy32:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'n': goto yy54;
		default: goto yy29;
	}
yy33:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'i': goto yy55;
		default: goto yy29;
	}
yy34:
	++cursor;
#line 180 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::LBracket; }
#line 467 "source/front/Lexer.cpp"
yy35:
	++cursor;
#line 181 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::RBracket; }
#line 472 "source/front/Lexer.cpp"
yy36:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'o': goto yy56;
		default: goto yy29;
	}
yy37:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'l': goto yy58;
		default: goto yy29;
	}
yy38:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'a': goto yy59;
		case 'n': goto yy60;
		default: goto yy29;
	}
yy39:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'f': goto yy62;
		default: goto yy29;
	}
yy40:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'i': goto yy64;
		default: goto yy29;
	}
yy41:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'h': goto yy65;
		case 'r': goto yy66;
		default: goto yy29;
	}
yy42:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'a': goto yy67;
		default: goto yy29;
	}
yy43:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'h': goto yy68;
		default: goto yy29;
	}
yy44:
	++cursor;
#line 178 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::LBrace; }
#line 535 "source/front/Lexer.cpp"
yy45:
	++cursor;
#line 161 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Or; }
#line 540 "source/front/Lexer.cpp"
yy46:
	++cursor;
#line 179 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::RBrace; }
#line 545 "source/front/Lexer.cpp"
yy47:
	++cursor;
#line 164 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::NotEquals; }
#line 550 "source/front/Lexer.cpp"
yy48:
	++cursor;
#line 182 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::RArrow; }
#line 555 "source/front/Lexer.cpp"
yy49:
	++cursor;
#line 175 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::ColonEq; }
#line 560 "source/front/Lexer.cpp"
yy50:
	++cursor;
#line 166 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::LessThanOrEqual; }
#line 565 "source/front/Lexer.cpp"
yy51:
	++cursor;
#line 163 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Equals; }
#line 570 "source/front/Lexer.cpp"
yy52:
	++cursor;
#line 168 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::GreaterThanOrEqual; }
#line 575 "source/front/Lexer.cpp"
yy53:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'o': goto yy69;
		default: goto yy29;
	}
yy54:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 't': goto yy70;
		default: goto yy29;
	}
yy55:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'l': goto yy71;
		default: goto yy29;
	}
yy56:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy57;
	}
yy57:
#line 153 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Do; }
#line 668 "source/front/Lexer.cpp"
yy58:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 's': goto yy73;
		default: goto yy29;
	}
yy59:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'l': goto yy74;
		default: goto yy29;
	}
yy60:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy61;
	}
yy61:
#line 147 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Fn; }
#line 754 "source/front/Lexer.cpp"
yy62:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy63;
	}
yy63:
#line 149 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::If; }
#line 826 "source/front/Lexer.cpp"
yy64:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'l': goto yy75;
		default: goto yy29;
	}
yy65:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'e': goto yy77;
		default: goto yy29;
	}
yy66:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'u': goto yy78;
		default: goto yy29;
	}
yy67:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'r': goto yy79;
		default: goto yy29;
	}
yy68:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'i': goto yy81;
		default: goto yy29;
	}
yy69:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'l': goto yy82;
		default: goto yy29;
	}
yy70:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'e': goto yy83;
		default: goto yy29;
	}
yy71:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy72;
	}
yy72:
#line 141 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::NilType; }
#line 947 "source/front/Lexer.cpp"
yy73:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'e': goto yy84;
		default: goto yy29;
	}
yy74:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 's': goto yy86;
		default: goto yy29;
	}
yy75:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy76;
	}
yy76:
#line 140 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Nil; }
#line 1033 "source/front/Lexer.cpp"
yy77:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'n': goto yy87;
		default: goto yy29;
	}
yy78:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'e': goto yy89;
		default: goto yy29;
	}
yy79:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy80;
	}
yy80:
#line 148 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Var; }
#line 1119 "source/front/Lexer.cpp"
yy81:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'l': goto yy91;
		default: goto yy29;
	}
yy82:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'e': goto yy92;
		default: goto yy29;
	}
yy83:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'g': goto yy93;
		default: goto yy29;
	}
yy84:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy85;
	}
yy85:
#line 151 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Else; }
#line 1212 "source/front/Lexer.cpp"
yy86:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'e': goto yy94;
		default: goto yy29;
	}
yy87:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy88;
	}
yy88:
#line 150 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::Then; }
#line 1291 "source/front/Lexer.cpp"
yy89:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy90;
	}
yy90:
#line 143 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::True; }
#line 1363 "source/front/Lexer.cpp"
yy91:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'e': goto yy96;
		default: goto yy29;
	}
yy92:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'a': goto yy98;
		default: goto yy29;
	}
yy93:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'e': goto yy99;
		default: goto yy29;
	}
yy94:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy95;
	}
yy95:
#line 144 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::False; }
#line 1456 "source/front/Lexer.cpp"
yy96:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy97;
	}
yy97:
#line 152 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::While; }
#line 1528 "source/front/Lexer.cpp"
yy98:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'n': goto yy100;
		default: goto yy29;
	}
yy99:
	yych = *++cursor;
	switch (yych) {
		case 0x00: goto yy30;
		case 'r': goto yy102;
		default: goto yy29;
	}
yy100:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy101;
	}
yy101:
#line 145 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::BooleanType; }
#line 1614 "source/front/Lexer.cpp"
yy102:
	yych = *++cursor;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy28;
		default: goto yy103;
	}
yy103:
#line 142 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::IntegerType; }
#line 1686 "source/front/Lexer.cpp"
yy104:
#line 189 "source/front/Lexer.re"
	{ UpdateLocation(); return Token::End; }
#line 1690 "source/front/Lexer.cpp"
}
#line 190 "source/front/Lexer.re"

  }
}
// NOLINTEND(cppcoreguidelines-avoid-goto)
} // namespace pink
