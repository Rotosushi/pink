A -scope- corresponds to a binding context.

(traditionally, thought of as synonymous
with the symbol-table, which provides the
binding action.)

in a set of scopes approach, we think of
scopes a little differently, every identifier
within the program belongs to a set of scopes,
normally, names are bound within a single scope
and Lookup searches for the first match.
this works straightforwardly in most binding/Lookup
situations, however we run into two contravening
cases in our current langauge, (and more, when considering
syntactic macros. this is something I am interested in
especially in a 'before compilation' sense, and not
a 'code generation at runtime' sense.)
both cases occur within substitution,
one, when a lambda term is defined within the scope of another lambda,
  and introduces a binding with the same name as the binding already
   introduced. in this case we allow the inner lambda to 'shadow' the
   outer declaration, and we treat the two bindings as different, despite
   their matching identifiers.
two, when a value being substituted into another lambda is itself a
  lambda, which has a free variable whose identifier matches the binding
  introduced by the lambda we are substituting into. in this case, under
  the current evaluation schema, we are forced into renaming the binding
  being introduced by the lambda in order to preserve the proper lexical
  binding.  (the free variable being bound to an identifier located in
  some shared outer scope.)

so, what is the fundamental thinking behind scope sets?
well, it revolves around binding forms within the language.
a binding form is any term within the language which
has the ability to bind names into a local scope.
which terms can bind within our language?
we have two terms which support binding, and
funnily enough we observe some subtly different behavior
between the two, the first and more basic of the two
is the 'bind' form. which is composed of the graphemes

identifier ':=' term

is typed as

if isUniqueInLocalScope(identifier)
  do rhstype := typeof(term, env);
     return rhstype

and when evaluated, performs the assignment to the local memory
associated with the term, and then returns the value it used to
assign. which allows compound assignment terms to flow together.

the thing to notice with this form is that we are talking about
constructing bindings within some already existing scope.
so, we should mention that the global scope is the implicit
scope to which we bind function definitions and global names currently.
(this will most definitely change when modules are introduced.)
this binding form does bind names, but it does not introduce a new
scope. this is a subtle distinction from the classic ML binding form,
the 'let identifier = term in term' which allows for ML style polymorphsim
to occur within this scope. we, however, are not interested in polymorphism
at the term level, as we want semantics closer to C, so we choose to
introduce a different binding form. (as above) which has semantics closer
to imperitive binding. by disallowing polymorphism at the term level, and
only having it at the time of a procedures application, i believe that
we can choose to implement our language in a more imperitive way.

so, the other binding form that we have in our language is the classic
lambda form. which we write

'\' identifier ':' term '=>' term

where the term immediately following the ':' must be a type literal.

this binding form does introduce a new local scope, this new local scope is
where the term following the '=>' symbol is evaluated. which allows for
local bindings to occur.


so, if we treat ':=' and 'lambda'
as primitive binding forms,

x := 1;
lambda y => z;

every binding within the bind expression
is in scope {a} (the global scope)

everything inside the lambdas body
is in scope {a, b}.
and thus the set of scopes associated with
(z) is {a, b}, if a binding of z occured somewhere
above the current two lines then it would necessarily
be bound in scope {a}. thus, when looking for a possible
match, we can see that not only is z the same name, But
the ScopeSet that the outer binding of z holds, is a subset
of the ScopeSet that the inner binding of z holds.
({a} is a subset of {a, b}), and given that it is the
only reference, it is by definition the largest subset.

lexical scoping corresponds to sets that are
constrained to a particular shape: for any
given set, there is a single scope {s} that
implies all of the other scopes.
as a result, {s} by itself is enough
information to identify a binding for a
given identifier. (this is the global scope)
(this is essentially saying, we traverse scopes
upwards until we reach the global scope, if we
find the binding there great, that is the binding.
if we don't, then we treat the reference as an error.
because the name is not bound in any scope.)

scopes are normally treated simply as lexical sets of names
in terms of the closest such {s}, for
some notion of "closest". (usually, first name found
when starting from the reference and working backwards
up the tree of scopes.)

with scope sets, "closest" means the
binding with the largest subset of the
identifiers own scopes. (in addition to
having the same symbolic identifier.)

if two identifiers have exactly overlapping
scopes, that is an ambiguous reference.

the basics are

-) binding forms introduce variables into scopes

-) specific binding forms introduce a new scope
    into which the bind their identifier.

-) identifiers are associated with the
    set of scopes they are a part of.

-) when resolving an identifier to the correct
    bound term, within the correct symbol table.
    we decide not just on if the identifier is
    the same, but when we are faced with more than
    one possible bound term to choose from, the
    best match is the identifier which is the biggest
    subset of the scope set for the identifier.


essentially:

1) x {a} := 1;

2) y {a} := 2;

3) \x {a, b} => x {a, b} + y {a, b};

when we go to resolve references within the
body of the lambda introduced on line 3
we look at the identifier x.
x can be resolved to two different bindings,
either the binding introduced on line 1, or line 3.

the scope set of this instance of x is {a, b}
the scope set of the binding of x on line 3 is {a, b}
the scope set of the binding of x on line 1 is {a}

since the scope set of the binding on line 3 is
the largest subset of each of the bindings, we
select it as the correct reference.

{a} is a subset of {a, b}
{a, b} is a subset of {a, b}

{a, b} is larger than {a}

the same strategy is employed when resolving the
reference to y. except there is only the single
reference.

if, say, we observe two bindings with the same size
subset, and they are both the largest, that's an
ambiguous reference.
