
use before definition is super useful when writing programs
composed of mutually recursive procedures. when parsing or
evaluating or traversing a tree, often we need to call a
procedure which is not defined within the current environment.

say we have two procedures

proc A ... =>
{
  ...;
  B ...;
  ...;
}

proc B ... =>
{
  ...;
  A ...;
  ...;
}


speaking in terms of the environment where both definitions
occur as is, we will assume for the sake of argument that the
formal and actual parameters are correct, we can say this program
will behave validly. (at the very least, the precise constraint that
both procedures exist to be called is satisfied, i.e. no linker errors).
however, we as programmers cannot enter this program into the compiler
in any way. (as things stand now). because when we try and Type procedure
A, whose definition occurs first, we must rely on the Type of B, which is
not defined yet. and could never have been defined, because B's Type
must rely on the Type of A. since assigning a Type to either requires the
prior existance of the other, we cannot type this program into the compiler.
but, as we mentioned before often, it is quite useful to define a procedure
in a mutually recursive fashion. so how can we solve this apparent dilemma?

well, firstly we can observe how C solves this problem. namely, by separating
the act of defining the type of procedures, from the act of defining procedures
themselves. this works, as now we can validly type the mutually recursive program
above. however, if the programmer forgets to finish defining the actual body
of either procedure, we introduce an error that cannot be found until we go to
link the program pieces together.

I feel a more general solution is possible, that raises this error to a compile
time one.

  the first crack at name-use-before-definition is
  to promote this specific error into a special type,
  Undef. which is a valid type, however, it is not a
  valid type to encounter in an evaluation.
  so, if a programmer enters at the top level,
  > y := x + 2
  this term will be initially typed as undefined,
  but it's definition will be accepted into the environment.
  but, if we encounter the term
  > x := 4
  then when we try and evaluate a term containing y
  > z := x + y
  we are now in an environment that contains enough
  bindings to resolve the type of y, from undefined
  to z.

  so, maybe we can perform more work to separate the two.
  there is now no way to immediately communicate the difference
  between the type of term y before definition of x, which would be
  undefined. and the Observable type of y after the definition of
  x, which would be Int.

  what if, instead of being bound within the symboltable, we
  construct a new table which manages these undefined terms.
  this could maybe be a multimap, between a list of
  names, which are undefined within the term and the (name, term) binding pair.
  when a name is bound (or perhaps immediately before binding)
  if it's type is undefined we instead bind the term in this other
  table. when a new binding is created in the SymbolTable we Lookup the binding in
  this other table. for each undefined term within this table,
  if they contain this binding in their undefined list, we can remove
  this binding from that list. if the lists size becomes zero, then we
  can bind the binding pair within the SymbolTable.


of course, this now means we cannot compile statements in a purely sequential
manner anymore, there needs to be an ordering enforced from the dependancy
graph of the information that is traveling between the statements. the
instructions then need to be emmitted in that order.

y := x + 4

x := 4

needs to be compiled as

x := 4

y := x + 4

which actually probably makes it a weird feature to have at the
expression level. when, in a low level language, often you want
to know/see the ordering of goings on, and if we define it to
evaluate sequentially, we aren't going to confuse anyone used to
working with lanaguges like C. (but there isn't a technical reason
this isn't possible, in fact, instruction reordering is already
considering a valid optimization technique, and we already have the
ability to sort based on the information dependancy graph, it's
called a topological sort, i think.)

in pink, use before definition really only makes sense with
procedures at the top level. which are already evaluated by another ordering.
(all program evaluation starts at main, if it is not applied
by main, or applied by any procedure main applies, then the
procedure is dead code.)
we already disallow expressions at the top level.
for "when does that evaluate" reasons.
only declarations are allowed at the top level.

in fact I like the way that modula handles it, where imported names
and exported names are explicit between modules. so a global value
would need to be explicitly included into any module that accessed
it. despite it's declaration being available for import into any
module. and with the (import x as y) statement, we can even
sidestep local name redefinitions into simple local names.
