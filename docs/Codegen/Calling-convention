C passes everything on the stack actually.
so the convention does
 -) push the 'save' registers on the stack (r10, r11,
     and the parameter registers rdi, rsi, rdx, rcx, r8, r9)

 -) the first six arguments are placed into the parameter registers
     rdi, rsi, rdx, rcx, r8, r9. and any remaining arguments are pushed
     onto the stack, as one walks the list. this has the effect that
     the top parameter on the stack is the last argument in the formal
     argument list.
     -) any values that we want to pass as arguments, that are larger
        than a single register cannot be passed in
        rdi, rsi, rdx, rcx, r8, r9, or the return register rax.
        these values must be passed on the stack.

        so, from the documentation; here:
        https://llvm.org/docs/LangRef.html#functionstructure
        https://llvm.org/docs/LangRef.html#calling-conventions
        https://llvm.org/docs/LangRef.html#parameter-attributes

        we are going to pass #everything as byval(type-of-param)
        which will get llvm to emit the hidden copy of this argument
        on the caller side, and pass the argument as a pointer.
        or maybe just places it on the stack? documentation doesn't specify.
        what the Documentation does specify is that the byval semantics
        will be respected.
