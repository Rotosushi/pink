/* Generated by re2c 2.2 on Tue Feb  1 21:37:21 2022 */
#line 1 "src/front/Lexer.re"

#include "front/Lexer.h"

namespace pink {
    Lexer::Lexer()
        : loc(), buffer()
    {
        end = cursor = marker = token = buffer.end();
    }

    Lexer::Lexer(std::string& buf)
        : loc(), buffer(buf)
    {
        end = buffer.end();
        cursor = marker = token = buffer.begin();
    }

    void Lexer::SetBuf(std::string& buf)
    {
        buffer = buf;
        end = buffer.end();
        cursor = marker = token = buffer.begin();
    }

    void Lexer::Reset()
    {
        buffer.clear();
        end = cursor = marker = token = buffer.end();
    }

    /*
        This routine works great for single line
        inputs, but should be tested against multi-line
        inputs for a more rigourous compiler. #TODO
    */
    void Lexer::UpdateLoc()
    {
    /*
        since token points to the beginning of the
        current token being lexed, and cursor points
        to the current position of the lexer,
        after a token has been lexed from the buffer,
        it sits between [cursor, token], and the
        string iterator operator -() lets us compute
        that distance in chars directly.

        theoretically we could swap string for wstring
        to support unicode. I think this would still
        work, but i'm not 100% sure about that.
    */
        size_t length = cursor - token;

        loc.firstLine   = loc.lastLine;
        loc.firstColumn = loc.lastColumn;

        for (size_t i = 0; i < length; i++)
        {
            if (token[i] == '\n')
            {
                loc.lastLine   += 1;
                loc.lastColumn += 1;
            }
            else
            {
                loc.lastColumn += 1;
            }
        }
    }

    /*
        token points to the beginning of the
        current token being lexed, and cursor points
        to the current position of the lexer,
        so the last token that was lexed is sitting
        between those two positions.

        Therefore we can use the string constructor
        taking a two iterators to construct the
        string from the characters from between that range.
    */
    std::string Lexer::yytxt()
    {
        return std::string(token, cursor);
    }

    Location Lexer::yyloc()
    {
        return loc;
    }


    /*
        These are the definitions of the parsing
        primitives that re2c uses, such that we
        can interoperate between c++ and re2c
        
        # TODO: i think this regex will allow for identifiers 
        	like: this-is-an-ident, follow-with-hyphen
        	but dissallow idents like:
        		-unop-application-not-an-ident,
        		binop-application-not-an-ident- more-text
        		 
        id=[a-zA-Z_]([-]?[a-zA-Z0-9_])*;
    */
    #line 123 "src/front/Lexer.re"


	// NOLINTBEGIN(cppcoreguidelines-avoid-goto)
	// re2c uses gotos to implement the lexer, as all of the 
	// gotos are from generated code, we are trusting re2c to 
	// use gotos in a safe and sane way here.
    Token Lexer::yylex()
    {
        while (1)
        {
            token = cursor;
         
            
#line 122 "src/front/Lexer.cpp"
{
	char yych;
	yych = *cursor;
	switch (yych) {
	case '\t':
	case '\n':
	case ' ':	goto yy4;
	case '!':
	case '$':
	case '%':
	case '&':
	case '*':
	case '+':
	case '-':
	case '<':
	case '>':
	case '@':
	case '\\':
	case '^':
	case '|':
	case '~':	goto yy6;
	case '(':	goto yy9;
	case ')':	goto yy11;
	case ',':	goto yy13;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy15;
	case ':':	goto yy18;
	case ';':	goto yy20;
	case '=':	goto yy22;
	case 'A':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy24;
	case 'B':	goto yy27;
	case 'I':	goto yy28;
	case 'N':	goto yy29;
	case 'f':	goto yy30;
	case 'n':	goto yy31;
	case 't':	goto yy32;
	case '{':	goto yy33;
	case '}':	goto yy35;
	default:
		if (end <= cursor) goto yy63;
		goto yy2;
	}
yy2:
	++cursor;
#line 160 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::Error; }
#line 223 "src/front/Lexer.cpp"
yy4:
	++cursor;
#line 159 "src/front/Lexer.re"
	{ UpdateLoc(); continue; }
#line 228 "src/front/Lexer.cpp"
yy6:
	yych = *++cursor;
	switch (yych) {
	case '!':
	case '$':
	case '%':
	case '&':
	case '*':
	case '+':
	case '-':
	case '<':
	case '=':
	case '>':
	case '@':
	case '\\':
	case '^':
	case '|':
	case '~':	goto yy6;
	default:	goto yy8;
	}
yy8:
#line 156 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::Op; }
#line 252 "src/front/Lexer.cpp"
yy9:
	++cursor;
#line 150 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::LParen; }
#line 257 "src/front/Lexer.cpp"
yy11:
	++cursor;
#line 151 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::RParen; }
#line 262 "src/front/Lexer.cpp"
yy13:
	++cursor;
#line 145 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::Comma; }
#line 267 "src/front/Lexer.cpp"
yy15:
	yych = *++cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy15;
	default:	goto yy17;
	}
yy17:
#line 157 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::Int; }
#line 286 "src/front/Lexer.cpp"
yy18:
	yych = *++cursor;
	switch (yych) {
	case '=':	goto yy37;
	default:	goto yy19;
	}
yy19:
#line 147 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::Colon; }
#line 296 "src/front/Lexer.cpp"
yy20:
	++cursor;
#line 146 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::Semicolon; }
#line 301 "src/front/Lexer.cpp"
yy22:
	yych = *++cursor;
	switch (yych) {
	case '!':
	case '$':
	case '%':
	case '&':
	case '*':
	case '+':
	case '-':
	case '<':
	case '=':
	case '>':
	case '@':
	case '\\':
	case '^':
	case '|':
	case '~':	goto yy6;
	default:	goto yy23;
	}
yy23:
#line 148 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::Equals; }
#line 325 "src/front/Lexer.cpp"
yy24:
	yych = *++cursor;
yy25:
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy24;
	default:	goto yy26;
	}
yy26:
#line 155 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::Id; }
#line 398 "src/front/Lexer.cpp"
yy27:
	yych = *++cursor;
	switch (yych) {
	case 0x00:	goto yy26;
	case 'o':	goto yy39;
	default:	goto yy25;
	}
yy28:
	yych = *++cursor;
	switch (yych) {
	case 0x00:	goto yy26;
	case 'n':	goto yy40;
	default:	goto yy25;
	}
yy29:
	yych = *++cursor;
	switch (yych) {
	case 0x00:	goto yy26;
	case 'i':	goto yy41;
	default:	goto yy25;
	}
yy30:
	yych = *++cursor;
	switch (yych) {
	case 0x00:	goto yy26;
	case 'a':	goto yy42;
	case 'n':	goto yy43;
	default:	goto yy25;
	}
yy31:
	yych = *++cursor;
	switch (yych) {
	case 0x00:	goto yy26;
	case 'i':	goto yy45;
	default:	goto yy25;
	}
yy32:
	yych = *++cursor;
	switch (yych) {
	case 0x00:	goto yy26;
	case 'r':	goto yy46;
	default:	goto yy25;
	}
yy33:
	++cursor;
#line 152 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::LBrace; }
#line 446 "src/front/Lexer.cpp"
yy35:
	++cursor;
#line 153 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::RBrace; }
#line 451 "src/front/Lexer.cpp"
yy37:
	++cursor;
#line 149 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::ColonEq; }
#line 456 "src/front/Lexer.cpp"
yy39:
	yych = *++cursor;
	switch (yych) {
	case 0x00:	goto yy26;
	case 'o':	goto yy47;
	default:	goto yy25;
	}
yy40:
	yych = *++cursor;
	switch (yych) {
	case 0x00:	goto yy26;
	case 't':	goto yy48;
	default:	goto yy25;
	}
yy41:
	yych = *++cursor;
	switch (yych) {
	case 0x00:	goto yy26;
	case 'l':	goto yy50;
	default:	goto yy25;
	}
yy42:
	yych = *++cursor;
	switch (yych) {
	case 0x00:	goto yy26;
	case 'l':	goto yy52;
	default:	goto yy25;
	}
yy43:
	yych = *++cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy24;
	default:	goto yy44;
	}
yy44:
#line 143 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::Fn; }
#line 556 "src/front/Lexer.cpp"
yy45:
	yych = *++cursor;
	switch (yych) {
	case 0x00:	goto yy26;
	case 'l':	goto yy53;
	default:	goto yy25;
	}
yy46:
	yych = *++cursor;
	switch (yych) {
	case 0x00:	goto yy26;
	case 'u':	goto yy55;
	default:	goto yy25;
	}
yy47:
	yych = *++cursor;
	switch (yych) {
	case 0x00:	goto yy26;
	case 'l':	goto yy56;
	default:	goto yy25;
	}
yy48:
	yych = *++cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy24;
	default:	goto yy49;
	}
yy49:
#line 138 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::IntType; }
#line 649 "src/front/Lexer.cpp"
yy50:
	yych = *++cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy24;
	default:	goto yy51;
	}
yy51:
#line 137 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::NilType; }
#line 721 "src/front/Lexer.cpp"
yy52:
	yych = *++cursor;
	switch (yych) {
	case 0x00:	goto yy26;
	case 's':	goto yy58;
	default:	goto yy25;
	}
yy53:
	yych = *++cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy24;
	default:	goto yy54;
	}
yy54:
#line 136 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::Nil; }
#line 800 "src/front/Lexer.cpp"
yy55:
	yych = *++cursor;
	switch (yych) {
	case 0x00:	goto yy26;
	case 'e':	goto yy59;
	default:	goto yy25;
	}
yy56:
	yych = *++cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy24;
	default:	goto yy57;
	}
yy57:
#line 141 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::BoolType; }
#line 879 "src/front/Lexer.cpp"
yy58:
	yych = *++cursor;
	switch (yych) {
	case 0x00:	goto yy26;
	case 'e':	goto yy61;
	default:	goto yy25;
	}
yy59:
	yych = *++cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy24;
	default:	goto yy60;
	}
yy60:
#line 139 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::True; }
#line 958 "src/front/Lexer.cpp"
yy61:
	yych = *++cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy24;
	default:	goto yy62;
	}
yy62:
#line 140 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::False; }
#line 1030 "src/front/Lexer.cpp"
yy63:
#line 161 "src/front/Lexer.re"
	{ UpdateLoc(); return Token::End; }
#line 1034 "src/front/Lexer.cpp"
}
#line 162 "src/front/Lexer.re"

        }
    }
    // NOLINTEND(cppcoreguidelines-avoid-goto)
}
