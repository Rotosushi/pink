 
  // okay, so what about catching the specific error of use-before-definition,
  // and adding all of the terms which produce that error to a table which 
  // points to the false symbol table
  // entry that we make at each usage of a variable that we cannot find.
  // then, each definition of a new variable is checked against this table, and
  // then when we encounter the definition of the variable that failed to typecheck
  // we can go back to the declaration which failed, and retry the typecheck.
  // we can repeat the process if there is another use-before-definition, and 
  // simply fail if it's any other error.
  //
  // whatever we implement has to make mutually recursive definitions viable as
  // well.
  //
  //
  // ideally we have a solution such that as long as the definition appears
  // somewhere in the source we are currently compiling (because we aren't
  // worrying about module inclusion just yet, but that is important)
  // then we can compile the source to machine code.
  //
  //
  //  in steps:
  //    when we encounter a variable declaration
  //    if the declaration is fully qualified, we simply act as normal
  //      and define said variable. except, we also check this new declaration
  //      against the new table, and if we are declaraing a variable which is
  //      needed to declare another variable, we then attempt to type the
  //      statement which is associated with that variable. Then, because there
  //      could be more than one undefined variable within the declaration we
  //      repeat this same procedure for that new try at the old declaration.
  //    if the declaration is unable to be typed because of
  //      a use-before-definition error then we create an empty
  //      declaration and add it to a table.
  //      (i think this just needs to be a
  //      table of identifiers to identifiers, the undefined name is the key,
  //      the variable that would be defined, along with it's declaration string
  //      are the value.)
  //      then we move on to parse more input.
  //    if the declaration returns any other error we simply return that error.
  //
  //
  //  the table is composed of elements like
  //
  //  InternedString undefname -> (InternedString newvar, std::unique_ptr<Ast>
  //  declast)
  //
  //  where the declast references undefname within the tree declaring
  //  newvar. so that we can use that to create the symbol table entry
  //  for newvar.
  //
  //  within the scope of a function, use-before-definition is not allowed.
  //  within global scope, it is.
  //
  //  also this solution brings up the fact that declarations can occur across
  //  multiple lines of source code, which would all need to be gathered into a
  //  single declast element to be typed later.
  //
  //  the real problem is that we currently parse and then attempt to type the
  //  entire source file at once. while this isn't a problem in and of itself,
  //  what it means is that we do not have a moment where we can splice out
  //  individual declarations to be filled in later.
  //
  //  this stems from our implementation of parsing blocks of code.
  //  that is how we handle source files which hold sequences of terms,
  //  and not simply single terms themselves.
  //  we always try to parse the entire block all at once.
  //  if instead of ever parsing a 'block' of statments, we parsed
  //  and subsequently typed each statement within the block, then
  //  we would have a place where we could implement the above solution.
  //  Notice that should we handle 'blocks' of code in this way, we still
  //  want to parse function bodies all at once, so if we exclusively use
  //  our pink::Block to represent function bodies, then we can construct
  //  another structure (or simply define a std::vector<>) which represents
  //  the source file we are parsing itself. that is the sequence of
  //  declarations which occur in said source file.
  //
  //  and all of this is just for typing the out of order declaration,
  //  when we go to codegen anything which relies on an out of order
  //  declaration we will again have to handle that, except this time within
  //  the rules of llvm. which means i think that we need to emit function
  //  definitions (function headers essentially) when we can type the function
  //  but not declare it yet, due to out of order declarations. then because we
  //  have the header then llvm can know that the linker will be able to splice
  //  in the actual function call during linking. then out of order
  //  declarations would be able to procede according to the steps above.
  //
  //  so in steps again,
  //
  //  when we try to codgen a function whose body calls or uses an out of order
  //  declaration we still error out of creating that declaration, at that
  //  moment, however we store everything needed to retry the declaration in
  //  a table, where the key to retrieve the data is the name which we were
  //  missing the declaration of.
  //  when we declare a new name and it is successfull we check this name
  //  against said table, and any declaration which is retrieveable against
  //  said name can be retried. any failures, by another use before definition
  //  error will be kept within the table, except retrievable by the new
  //  undeclared name.
  //
  //
  //  if at the end of parsing the entirety of the source we still do not know
  //  the names within the declarations then each use-before-declaration will
  //  be raised to an actual error, and handled as we already handle errors.
  //
  //
  //
  //