# Fix all the bugs


# Test[
#  Parser(check),
#  Typecheck(in progress),
#  Codegen
# ]


# Features [
  Global Declarations(testing),
  Functions [
    Expressions [
      Local Declarations,
      Operators [
        Assignment(testing),
        Member Accessor(testing),
        Subscript Accessor(testing),
        Binops(testing),
        Unops(testing),
      ],
      Conditionals [
        if-then-else(testing),
        if-then(todo),
        match(todo),
      ],
      Loops [
        while-do(testing),
        do-while(todo),
        for-each(todo),
      ],
    ],
  ],
  Types [
    Nil(testing),
    Integer(testing),
    Boolean(testing),
    Float(todo),

    Array*(testing),
    Tuple(testing),
    Pointer(testing),
    Slice(todo),

    Struct(todo),
    Union**(todo),

    Annotations [
      Mutable,
      Variable,
      Literal,
    ],
  ],
]

# * Arrays have a size member. w/runtime panic and/or typechecked access
# ** tagged Unions. w/runtime panic and/or typechecked access.

# Rewrite the Parser to a new grammar (maybe entirely, maybe just a little.
 I am debating a parenthesis-less call syntax. I want it to be LL(1))
  # rewrite operators such that they are treated as tokens in their own right.
    (no more user defined operators, it introduces a parsing/lexing ambiguity 
    with operator < and > being used for template syntax.)
    1) add tokens for existing operators (done)
    2) add lexer rules for existing operators (done)
    3) Add IsOperator(Token) for binop parsing
    4) Add Precedence(Token), Associativity(Token) for binop parsing
    5) modify Binop/Unop to use Tokens for the operator 
    6) modify BinopTable/UnopTable to use Tokens for the operator
    7) modify BinopPrimitives/UnopPrimitives to use Tokens for the operators. 
    
    ?) we can declare the Binop and Unop Tables constexpr now that their 
      full contents are known at compile time.

  # optional type annotations in bind expressions, these get checked during typeing.
  # const-ness and mutability specifiers (I think these have to define new types?
    still considering the implementation of this tbch)
  # optional else clauses on conditionals
  # optional blocks in conditionals, loops, and functions.
    (can have a single affix expression instead)

