# Fix all the bugs


# Test[
#  Parser(needs more tests, all currently pass),
#  Typecheck(in progress),
#  Codegen
# ]


# Features [
  Global Declarations(testing), leaning towards removing these
  Namespaces****,
  Modules,
  Functions [
    Arguments [
      single value types(testing),
      aggregate types(testing)
    ]
    Return values [
      single value types(testing),
      aggregate types(testing)
    ]
    Expressions [
      Local Declarations,
      Operators [
        Assignment(testing),
        Member Accessor(testing),
        Subscript Accessor(testing),
        Binops(testing),
        Unops(testing),
      ],
      Conditionals [
        if-then-else(testing),
        if-then(todo),
        match(todo),
      ],
      Loops [
        while-do(testing),
        do-while(todo),
        for-each(todo),
      ],
    ],
  ],
  Types [
    Nil(testing),
    Integer(testing),
    Boolean(testing),
    Float(todo),

    Array*(testing),
    Tuple(testing),
    Pointer(testing),
    Slice(in-progress),

    Algebraic Data Types**(todo),
    Templates (todo),
    Concepts (todo),
  ],
  Annotations***(todo) [
    # the exact annotations are to be decided,
    # it's just that mutability, the ability 
    # to take an address, and the ability to 
    # assign to/of a symbol are all ideas which 
    # must be expressable to get correct semantics.
    # question) does mutability need to be attached to the Type
    #           or is it fine to have it attached to the Ast?

    # constness
    Mutable,
    Constant,

    # value category
    Variable,
    Literal,
    Temporary,
  ],
]

# * Arrays have a size member. w/runtime panic and/or typechecked access

# ** ADT's subsume Struct, Tagged Unions, and Enums, in one feature!
#    I want them to be conceptually equivalent to Tagged Enums with 
#    carrier data. Essentially std::variant, but simpler type errors 
#    and data inspection during debugging, 
#    and builtin to the language itself, for better support.

# *** Annotations subsume the semantics of WithinAddressOf 
#    WithinLHSOfAssignment, and WithinDereferencePtr.
#    I suspect they are more flexible, easier to extend,
#    and support as the semantics get more complex.  

# **** Namespaces allows names to be reused easily and 
#      safely. Functions are a namespace, and modules 
#      are a namespace

# Rewrite the Parser to a new grammar (maybe entirely, maybe just a little.
 I am debating a parenthesis-less call syntax. I want it to be LL(1))
  # optional type annotations in bind expressions, these get checked during typeing.
  # const-ness and mutability specifiers (I think these have to define new types?
    still considering the implementation of this tbch)
  # optional else clauses on conditionals
  # optional blocks in conditionals, loops, and functions.
    (can have a single affix expression instead)

