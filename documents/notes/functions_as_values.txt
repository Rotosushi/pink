1/9/2023
  Lambdas might be implementable as 'classes'
  that is we simply generate an 'anonymous'
  structure which records the arguments to
  the function and pass that in as an optionally
  invisible this pointer. Thus when we call said lambda
  it's body is implemented such that all
  arguments are retrieved through the pointer
  to the argument structure. then if each lambda
  still has the same signature of [void*(*)(void*)]
  we can imagine containers holding pointers to lambdas.
  (though each lambda within a given container must
  follow the rules of the given container.)

  okay hold up, what is to stop us from using the C
  calling convention as is, and simply representing
  lambda literals as structure types with a function
  pointer of the lambda type as the first member plus
  each argument of the lambda as each subsequent member?
  we can call that structure type a closure.
  then they are first class values exactly how structure
  types already are first class values.
  we could make an array of different lambdas as long as they had
  the same type, because in that case the structure types
  would by definition work out to the same structure
  type, just with a different address for the function,
  and we can already store heterogenous types in structure
  types. Also function calls work given a pointer to the
  closure structure, they can call through the function
  pointer, and retrieve all of the necessary values via
  the structure object at the call site. (note this does
  a bit of extra work over direct calls, but you get more
  flexibility via the closures being first class),
  this also doesn't stop us from passing a secret this
  pointer in addition, which allows us to lower self 
  recursive calls into a call through the closure's 
  function pointer. 

  oh, but then what is a function pointer? because we just gave ourselves
  a choice, either a pointer to a closure, or the function pointer
  within the closure. I mean, given that you have access to more
  information via a pointer to the closure I like that more.

  we can support the case of an empty pointer by making all pointer types
  optional types. and we can easily construct a closure type for any regular 
  function. which allows one to pass regular functions as values.
  additionally, since we can easily lower partial binding into struct access,
  we can support partial application of both lambda's and regular functions.
  As long as we accept that there is a value representing that particular 
  partial application created at that momement, and then destroyed like any 
  other temporary value. Thus that value must be immediately used (like it 
  is when you pass a function as a value (partial application providing zero 
  arguments)) or that value must be assigned to a local variable.
  (or assigned to some dynamic memory)

  we are prevented because of the type narrowing that happens during partial application.
  c++ solves this with the explicit capture list.
  which solves this whole thing rather elegantly. as there is no more partial binding,
  because all arguments you want to partially bind can be done via the explicit capture list.
  as far as I can tell the only thing a c++ lambda cannot do as a consequence of this
  is have an outer function construct a lambda, pass that lambda into a function call,
  have that function call partially bind the lambda then pass the same closure back out.
  or, going the other way, construct a lambda, pass it to a function to bind some number of 
  arguments, then pass it to another function to bind still more arguments, and so on,
  until you apply the function after binding all of the arguments. Essentially, c++ 
  requires all partial bindings to occur at lambda creation time, whereas a more general 
  lambda would allow you to partially bind arguments at a later point in the program.

  if we could come up with a structure which could represent a closure around 
  a function of arbitrary type which could be applied systematically 
  without change to the underlying code which performs the application, then 
  we could imagine a proper semanitic to the situation where a larger function type 
  is partially applied down to a smaller function type, then it could be passed 
  to a function as an argument, and that inner functions call site would be able to 
  apply the passed closure.

  so what if instead of simply storing a struct with all of the arguments plus 
  the function pointer itself, you also store a pointer to that struct.
  then when any call site wants to pass the arguments it can simply pass that pointer,
  thus any call site can make use of only the first two members of the struct.

  in C it might be:

  void f(void* ret, void* args) { 
    int* result = (int*)ret;
    closure_f_data* data = (closure_f_data*)args;
    *result = data->a + data->b;
  }

  typedef int (*f_pointer)(int, int);

  typedef struct closure_f_data {
    f_pointer ptr;
    int a;
    int b;
  } closure_f_data;

  typedef struct closure_f {
    f_pointer function_ptr;
    closure_f_data *args;
    closure_f_data data;
  } closure_f;

  the problem with this is how does a caller know where to place any new arguments 
  within the structure during partial application, so they can be passed during
  full application? if you are wondering why that poses a problem, it is because 
  after you partially apply a procedure it's type can get smaller. (as the new 
  closure takes less arguments to apply) if you have a closure such as this, due to 
  it's type and the typechecking rules, you can bind this to a procedure argument which  
  expects a smaller function type, Thus the layout type of the closure you would 
  expect given the arguments function type is different than the layout type of the 
  runtime closure type. if this type incongruity can be resolved at runtime, such that 
  a single implementation of a function call site, can call any closure type which matches 
  the exact function type, or any closure which could be reduced due to the evaluation rules to 
  a type which matches the function type, then that would allow you to implement the 
  type shortening/reduction that the evaluation rules provide. Additionally given a 
  mechanism which gave you type shortening like this, you can leverage it to 
  implement hidden parameters to functions, allowing the capture list of a lambda to 
  be passed into a call of said lambda.

  there is no way to type agnostically bind arguments to the closure object,
  something which is necessary to support both full and partial application.

  this is where my next idea comes from.

  assuming that it is perfectly fine to pass a pointer to an inner struct member 
  as the single argument to a procedure at application time, then it might also be 
  acceptable to use a pointer to a structure member to bind a runtime value to 
  an argument within that structure, thus we might be able to leverage an array 
  of void* to perform binding at parital application time. like so:

  void f(void *ret, void *args) { 
    int* ret_val = (int*)ret;
    closure_f_data* data = (closure_f_data*)args;
    *ret_val = data->a + data->b;
    return;
   }

  typedef void (*f_pointer)(void*, void*);

  typedef struct closure_f_data {
    f_pointer ptr;
    int a;
    int b;
  } closure_f_data;

  typedef struct closure_f {
    f_pointer ptr;
    closure_f_data *arg_struct;
    size_t length;
    size_t bound;
    void* arguments[3];
    closure_f_data data;
  } closure_f;

  void init_closure_f(closure_f* closure, f_pointer ptr) {
    closure->ptr = ptr;
    closure->arg_struct = &closure->data;
    closure->length = 3;
    closure->bound  = 1;
    closure->data.ptr = ptr;
    closure->arguments[0] = &closure->data.ptr;
  }

  void init_closure_f(closure_f* closure, f_pointer ptr, int a, int b) {
    closure->ptr = ptr;
    closure->arg_struct = &closure->data;
    closure->length = 3;
    closure->bound  = 3;
    closure->data = {ptr, a, b};
    closure->arguments[0] = &closure->data.ptr;
    closure->arguments[1] = &closure->data.a;
    closure->arguments[2] = &closure->data.b; 
  }

  typedef struct Closure {
    f_pointer ptr;
    void* arg_struct;
    size_t length;
    size_t bound;
    void** arguments;
  } Closure;

  void Apply(Closure* closure, void* ret_val) {
    closure->ptr(ret_val, closure->arg_struct);
  }

  we can then apply a closure via a pointer to said closure like so:
  
  int a = ...;
  int b = ...;
  closure_f lambda;
  init_closure_f(&lambda, f, a, b);
  ...;
  Closure* closure = (Closure*)(&lambda);
  int ret_val;
  Apply(closure, (void*)(&ret_val));

  we can bind a given argument to the closure like so:

  closure_f lambda;
  init_closure_f(&lambda, f);
  ...;
  int a = ...;
  Closure* closure = (Closure*)(&lambda);
  *((int*)(closure->arguments[1])) = a;

  and we can tell when a given closure has no more 
  slots open by checking the difference between 
  length and bound.
  
  I think, in the interests of getting something working, that 
  doesn't take quite as much work, we can transition from as we
  are now; no closures, to an environment with closures but no 
  partial application, then to an environment with full partial 
  application. 

  then we can get to work adding templates to the language.

  because if we can implement partial application in a statically 
  typed, strictly evaluated way, the kind of polymorphism which 
  arises from the introduction of type variables seems to simply 
  fit right on top. (because any given implementation of the 
  Type variable term is simply one of a set of statically typed 
  strictly evaluated implementations. the difficulty arises in the 
  choice from the set. (I think this is F-bounded polymorphism?))

a few questions before we really have all the use cases down,
how does a closure look from the perspective of passing one 
as a parameter? 
what if we say, a pointer, to the closure base class?

when we construct a local closure we can allocate the closure 
derived type. then when we pass it to a function we simply pass 
by reference. this means that:
A) at the construction site we have the function definition/declaration 
available for the constructor.
or
B) have received the closure as an argument to the current scope, and 
this is partial binding, (which requires more consideration.)

so like, what does it mean for a function to take a closure as argument?
well it means that there is a closure pointer in that parameter.

and what does it mean to store a closure on the stack? 
well, what if we say, a stack allocation of the closure object?

then we can simply take it's address to pass it to a function.
the callee will have a live reference for it's lifetime, because the 
closure lives in the outer scopes stack.

and then what about when we return a closure from a function?
well, what if we say, ensure that the returned closure is 
sitting in the return slot of a function, and we allow the 
return slot of an applied function to be the return slot of 
a callee.

how could the caller know how much memory to allocate for the return 
slot if the slot is meant to hold a reduced lambda object?
we could not tell from outside if the inner scope needed to alloca 
more space on the stack than it's calling signature says.
which is a problem that needs to be solved if you wanted to support 
that semantic.

well, the inner scope would certainly know exactly 
how much stack spack to store the closure it wanted to return,
by the same reasoning that any scope knows how much space is needed 
to construct a new closure. the question is about getting that information 
to calling code. 

say, if you were calling a closure parameter to get some 
new closure, partially binding that new closure, then returning it as 
the return value of the callee.
sure you know to allocate the return slot of the function as a whole 
to hold the returned value from the closure parameter, but that forces 
the question, what is the size of the return slot of the passed in closure?
if the static size of the closure being returned is larger 
than can be derived from the static type of the call site,
then it is undecidable how much space to allocate for the return slot.

giving up partial application, still leaves the language with functions 
as values however, which is neat.

hold on, what about copying the closure? 
or are closures simply move only reference types?

well, copying is less of a problem if you always know the 
calling signature of the closure and there is no partial application.
for one) there is now no difference between a closure and a c function 
pointer. c++ has captures at least. how is that accomplished?
by way of objects! each lambda is it's own class type, and each lambda 
thus defines a default constructor and copy constructor. thus the 
problem is solved because when the inner function returns a lambda, 
it exposes the lambda class type in the return type of it's calling 
signature, thus any scope which can call the function can also allocate 
a class of the correct lambda type.

so, how about we implement objects then? well what,
are we going to implement c++ now? 
well, we don't have function overloading, so not quite.
(or a truckload of other features) (and this language is LL(1))

and we don't have to implement inhereitence right off the bat either.
we can simply implement structures, and then constructors, and then inheritance.







