okay, so how do we assign pointer values to pointer types,
and regular values to regular types,

we have a few operations which are critical to think about,
variables
assignment
binding
AddressOfValue
ValueOfAddress

llvm has been specifically designed to not need an address of
operator, in that the load and store instructions themselves
take the address of the memory being read/written.

so, on the surface, this is easy, when we want to create a load
instruction, the place where we are writing can still be accessed
via a pointer, and the value can be either a regular value or
a pointer value. as long as the location is the correct type, the
load instruction will compiler. similarly for the store instruction,
the memory location being referenced will still be a pointer, and
the value will still be either a regular value or a pointer value,
and as long as the memory location being written to is the correct
type, the store instruction will compile.

however, how our language currently operates is that the Variable
object itself constructs the load, and thus when a variable is
accessed, we retrieve a regular value and not the address of the
variable.
the only way we could ever take the address of a variable by
composing together the Variable ast node and the unop ast node
is if we remove that behavior from Variables.
however we still need to tell the difference between
x = y
and
x = &y

and under the above rules, both rhs of the assignment expression
will return a llvm::Value which is the address of the memory
location of y. so, then we need to tell the difference within the
assignment expression itself. and we can actually do that, because
the operator will change the pink::Type* of the resulting
expression  from a simple type, to a pointer type.
and happily this is only in the case where the operator appears.

however, this doesn't truly change the type of the llvm::Value
in either case. and that is important, because we don't want
that to change, we want it to be the case that assignment itself
is deciding wether or not to load from the address given before
performing the store associated with the assignment,
or simply use the address directly as the value being stored.

we must be careful however, to note that if we codegen
a pink::PointerType that is pointing to a integer type,
well, since llvm gave us that integer type as a pointer
to an integer type, pink::PointerType will wrap that pointer type
in another llvm::PointerType, incorrectly returning a 2 star
pointer type.. we have the correct types, however we cannot assign to a literal value
here, only to a pointer, pointing to a valid memory location in the modules
global space or the local stack frame, so we check that the bound value is
able to be assigned to.